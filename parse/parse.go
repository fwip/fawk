//line parse.y:2
package parse

import __yyfmt__ "fmt"

//line parse.y:2
const NAME = 57346
const NUMBER = 57347
const STRING = 57348
const ERE = 57349
const FUNC_NAME = 57350
const Begin = 57351
const End = 57352
const Break = 57353
const Continue = 57354
const Delete = 57355
const Do = 57356
const Else = 57357
const Exit = 57358
const For = 57359
const Function = 57360
const If = 57361
const In = 57362
const Next = 57363
const Print = 57364
const Printf = 57365
const Return = 57366
const While = 57367
const BUILTIN_FUNC_NAME = 57368
const GETLINE = 57369
const ADD_ASSIGN = 57370
const SUB_ASSIGN = 57371
const MUL_ASSIGN = 57372
const DIV_ASSIGN = 57373
const MOD_ASSIGN = 57374
const POW_ASSIGN = 57375
const OR = 57376
const AND = 57377
const NO_MATCH = 57378
const EQ = 57379
const LE = 57380
const GE = 57381
const NE = 57382
const INCR = 57383
const DECR = 57384
const APPEND = 57385
const NEWLINE = 57386

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"NAME",
	"NUMBER",
	"STRING",
	"ERE",
	"FUNC_NAME",
	"Begin",
	"End",
	"Break",
	"Continue",
	"Delete",
	"Do",
	"Else",
	"Exit",
	"For",
	"Function",
	"If",
	"In",
	"Next",
	"Print",
	"Printf",
	"Return",
	"While",
	"BUILTIN_FUNC_NAME",
	"GETLINE",
	"ADD_ASSIGN",
	"SUB_ASSIGN",
	"MUL_ASSIGN",
	"DIV_ASSIGN",
	"MOD_ASSIGN",
	"POW_ASSIGN",
	"OR",
	"AND",
	"NO_MATCH",
	"EQ",
	"LE",
	"GE",
	"NE",
	"INCR",
	"DECR",
	"APPEND",
	"'{'",
	"'}'",
	"'('",
	"')'",
	"'['",
	"']'",
	"','",
	"';'",
	"NEWLINE",
	"'!'",
	"'>'",
	"'<'",
	"'|'",
	"'?'",
	"':'",
	"'~'",
	"'$'",
	"'='",
	"'+'",
	"'-'",
	"'*'",
	"'%'",
	"'/'",
	"'^'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line parse.y:382

func parse(s string) {
	l := lex(s)
	yyErrorVerbose = true
	yyParse(l)
}

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
}

const yyNprod = 206
const yyPrivate = 57344

var yyTokenNames []string
var yyStates []string

const yyLast = 1361

var yyAct = [...]int{

	133, 118, 188, 12, 12, 224, 125, 256, 397, 124,
	210, 189, 221, 191, 195, 392, 86, 87, 388, 88,
	90, 244, 31, 241, 106, 217, 35, 119, 29, 14,
	6, 105, 89, 9, 9, 41, 216, 422, 218, 404,
	37, 38, 35, 52, 72, 209, 208, 139, 140, 141,
	142, 143, 144, 117, 145, 146, 147, 148, 149, 150,
	151, 152, 41, 110, 111, 156, 399, 158, 159, 160,
	161, 162, 163, 327, 164, 165, 166, 167, 168, 169,
	170, 171, 72, 4, 30, 175, 37, 38, 157, 389,
	272, 252, 179, 44, 181, 182, 183, 184, 185, 186,
	187, 179, 72, 190, 190, 190, 192, 194, 176, 309,
	310, 307, 308, 306, 305, 371, 193, 201, 179, 177,
	45, 405, 303, 304, 200, 383, 328, 250, 198, 138,
	211, 211, 335, 334, 180, 177, 179, 179, 266, 238,
	178, 212, 311, 177, 104, 433, 154, 155, 378, 104,
	236, 423, 418, 332, 104, 239, 240, 97, 98, 95,
	96, 94, 93, 412, 403, 402, 173, 174, 400, 394,
	91, 92, 393, 326, 242, 243, 329, 325, 253, 251,
	249, 248, 331, 330, 315, 314, 206, 205, 204, 113,
	99, 112, 103, 102, 202, 32, 384, 247, 427, 409,
	42, 36, 416, 203, 43, 254, 255, 207, 39, 40,
	406, 377, 358, 258, 345, 213, 323, 267, 268, 269,
	321, 271, 261, 265, 214, 197, 172, 153, 7, 279,
	293, 223, 34, 5, 270, 108, 109, 33, 271, 28,
	17, 13, 317, 219, 215, 318, 319, 320, 22, 135,
	134, 316, 116, 29, 20, 21, 23, 26, 115, 196,
	3, 245, 132, 246, 2, 1, 0, 190, 0, 0,
	0, 136, 137, 100, 101, 27, 32, 0, 333, 0,
	0, 107, 0, 0, 0, 293, 0, 271, 0, 0,
	24, 25, 259, 260, 0, 18, 0, 0, 0, 293,
	349, 0, 19, 0, 382, 20, 21, 23, 26, 30,
	0, 15, 16, 132, 0, 190, 190, 369, 370, 0,
	0, 0, 136, 137, 222, 0, 27, 32, 211, 0,
	0, 379, 380, 0, 0, 322, 0, 324, 376, 258,
	381, 24, 25, 0, 0, 0, 18, 0, 0, 0,
	372, 0, 373, 19, 0, 0, 336, 0, 0, 0,
	30, 0, 15, 16, 0, 0, 0, 346, 347, 0,
	0, 0, 0, 0, 0, 0, 396, 398, 0, 401,
	0, 359, 360, 395, 0, 230, 230, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 211, 258, 410, 0, 374,
	375, 0, 0, 420, 0, 415, 0, 0, 0, 425,
	419, 0, 421, 265, 265, 0, 424, 0, 431, 258,
	428, 0, 0, 0, 0, 430, 0, 0, 419, 265,
	0, 424, 265, 430, 265, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 29, 20, 21,
	23, 26, 10, 11, 0, 0, 0, 0, 0, 0,
	0, 8, 230, 230, 230, 230, 230, 0, 0, 27,
	32, 312, 313, 0, 411, 0, 413, 414, 0, 0,
	0, 0, 0, 417, 24, 25, 0, 9, 0, 18,
	0, 0, 426, 0, 0, 0, 19, 429, 0, 0,
	0, 432, 0, 30, 0, 15, 16, 434, 0, 0,
	0, 0, 230, 230, 230, 230, 230, 230, 230, 230,
	230, 0, 0, 0, 230, 0, 230, 230, 230, 230,
	230, 230, 230, 230, 230, 0, 0, 0, 230, 0,
	300, 301, 302, 0, 230, 230, 230, 230, 230, 230,
	230, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 230, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 230, 230, 0, 337, 338,
	339, 340, 341, 342, 0, 343, 344, 0, 230, 230,
	348, 0, 350, 351, 352, 353, 354, 355, 0, 356,
	357, 0, 0, 0, 361, 0, 0, 0, 0, 0,
	362, 363, 364, 365, 366, 367, 368, 230, 0, 0,
	0, 230, 0, 0, 29, 20, 21, 23, 26, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	81, 385, 0, 0, 0, 0, 27, 32, 0, 0,
	0, 386, 387, 0, 83, 82, 80, 76, 74, 78,
	75, 24, 25, 0, 390, 391, 18, 0, 0, 0,
	0, 0, 0, 19, 77, 73, 85, 84, 0, 79,
	30, 0, 70, 71, 67, 69, 68, 66, 29, 20,
	21, 23, 26, 407, 0, 0, 0, 408, 0, 0,
	0, 0, 0, 0, 61, 0, 0, 0, 0, 0,
	27, 32, 0, 0, 0, 0, 0, 0, 63, 62,
	60, 56, 54, 58, 55, 24, 25, 0, 0, 0,
	18, 0, 0, 0, 0, 0, 0, 19, 57, 53,
	65, 64, 0, 59, 30, 0, 50, 51, 47, 49,
	48, 46, 29, 20, 21, 23, 26, 0, 0, 126,
	127, 132, 131, 0, 129, 122, 0, 120, 0, 128,
	136, 137, 130, 121, 27, 32, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 24,
	25, 0, 9, 114, 18, 0, 0, 0, 0, 123,
	35, 19, 0, 0, 0, 0, 0, 0, 30, 0,
	15, 16, 29, 20, 21, 23, 26, 0, 0, 126,
	127, 132, 131, 0, 129, 264, 0, 262, 0, 128,
	136, 137, 130, 263, 27, 32, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 24,
	25, 0, 9, 0, 18, 0, 0, 0, 0, 123,
	35, 19, 0, 0, 0, 0, 0, 0, 30, 0,
	15, 16, 29, 20, 21, 23, 26, 0, 0, 126,
	127, 132, 131, 0, 129, 122, 0, 120, 0, 128,
	136, 137, 130, 121, 27, 32, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 24,
	25, 0, 9, 0, 18, 0, 0, 0, 0, 123,
	35, 19, 0, 0, 0, 0, 0, 0, 30, 0,
	15, 16, 29, 20, 21, 23, 26, 0, 0, 126,
	127, 132, 131, 0, 129, 122, 0, 120, 0, 128,
	136, 137, 130, 121, 27, 32, 0, 0, 0, 0,
	0, 0, 29, 228, 229, 231, 234, 0, 0, 24,
	25, 0, 9, 199, 18, 0, 0, 0, 296, 123,
	0, 19, 0, 0, 235, 0, 0, 0, 30, 0,
	15, 16, 298, 297, 295, 0, 0, 0, 0, 232,
	233, 0, 0, 0, 286, 0, 0, 0, 0, 0,
	0, 227, 0, 0, 0, 299, 0, 294, 30, 0,
	291, 292, 288, 290, 289, 287, 29, 228, 229, 231,
	234, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 282, 0, 0, 0, 0, 0, 235, 0,
	0, 0, 0, 0, 0, 0, 284, 283, 281, 0,
	0, 0, 0, 232, 233, 0, 0, 0, 286, 0,
	0, 0, 0, 0, 0, 227, 0, 0, 0, 285,
	0, 280, 30, 0, 277, 278, 274, 276, 275, 273,
	257, 20, 21, 23, 26, 0, 0, 0, 0, 132,
	0, 0, 0, 0, 0, 0, 0, 0, 136, 137,
	0, 0, 27, 32, 0, 29, 20, 21, 23, 26,
	10, 11, 0, 0, 0, 0, 0, 24, 25, 8,
	0, 0, 18, 0, 0, 0, 0, 27, 32, 19,
	29, 20, 21, 23, 26, 0, 30, 0, 15, 16,
	0, 0, 24, 25, 0, 0, 0, 18, 0, 0,
	0, 0, 27, 32, 19, 0, 0, 0, 0, 0,
	0, 30, 0, 15, 16, 0, 0, 24, 25, 0,
	0, 0, 18, 29, 20, 21, 23, 26, 35, 19,
	0, 0, 0, 0, 0, 0, 30, 0, 15, 16,
	0, 0, 0, 0, 0, 27, 32, 29, 228, 229,
	231, 234, 0, 0, 0, 29, 228, 229, 231, 234,
	24, 25, 0, 0, 0, 18, 0, 0, 0, 235,
	0, 0, 19, 0, 0, 0, 0, 235, 0, 30,
	0, 15, 16, 0, 232, 233, 0, 0, 0, 286,
	0, 0, 232, 233, 0, 35, 227, 286, 29, 228,
	229, 231, 234, 30, 227, 225, 226, 0, 0, 0,
	0, 30, 0, 225, 226, 0, 0, 0, 0, 0,
	235, 29, 228, 229, 231, 234, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 232, 233, 0, 0, 0,
	237, 0, 0, 235, 0, 0, 0, 227, 0, 0,
	0, 0, 0, 0, 30, 0, 225, 226, 232, 233,
	0, 0, 0, 220, 0, 0, 0, 0, 0, 0,
	227, 0, 0, 0, 0, 0, 0, 30, 0, 225,
	226,
}
var yyPact = [...]int{

	-1000, -1000, 453, 1131, -26, 35, 35, -11, 196, -1000,
	-1000, -1000, 70, 704, 640, 1199, 1199, -1000, 1199, 1199,
	-1000, -1000, 129, -1000, 24, 24, 147, 146, -1000, 96,
	1199, -31, 24, 35, -11, -1000, 12, -1000, -1000, 12,
	12, -1000, 145, 143, 768, -1000, 1199, 1199, 1199, 1199,
	1199, 1199, 640, 1199, 1199, 1199, 1199, 1199, 1199, 1199,
	1199, 223, -1000, -1000, 1199, 168, 1199, 1199, 1199, 1199,
	1199, 1199, 640, 1199, 1199, 1199, 1199, 1199, 1199, 1199,
	1199, 222, -1000, -1000, 1199, 168, -1000, -1000, 93, 87,
	-1000, -1000, -1000, 1199, 1199, 1199, 1199, 1199, 1199, 1199,
	-1000, -1000, 1199, 1199, 1199, -1000, 1199, -1000, 12, 12,
	-1000, -1000, 221, 221, -1000, 948, 149, -1000, -1000, -1000,
	142, 141, 140, -1000, -6, -1000, -1000, -1000, -1000, 1199,
	1199, -1000, 220, -1000, -1000, -18, 1297, 1274, 1156, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1156, 1156, -35, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1156, 1156, -37, -1000, -1000, -1000, -1000,
	177, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 134, -1000,
	69, 51, 133, 78, -1000, 132, 41, -1000, 131, -1000,
	-1000, -1000, -1000, -26, 1199, 1199, 1106, -26, -1000, -1000,
	-1000, -1000, -1000, 828, 90, -1000, 1199, 1199, 1199, -1000,
	1199, 40, -1000, 1042, 978, 1231, 1231, 1231, -1000, -1000,
	81, -1000, 24, 24, 139, 138, 40, 1199, -1000, -1000,
	-1000, 1199, -1000, -1000, 1199, 1156, 1156, 216, -1000, -1000,
	-1000, -1000, 212, -1000, 130, 126, 22, 106, -1000, -26,
	-26, 151, 137, 136, 107, -6, 1199, -1000, -1000, -1000,
	86, 85, -1000, 1231, 1231, 1231, 1231, 1231, 1231, 978,
	1231, 1231, 210, -1000, -1000, 1231, 1199, 1231, 1231, 1231,
	1231, 1231, 1231, 978, 1231, 1231, 208, -1000, -1000, 1231,
	-1000, -1000, -1000, -1000, -1000, 1231, 1231, 1231, 1231, 1231,
	1231, 1231, -1000, -1000, 1199, 1199, 68, -1000, -1000, -1000,
	-1000, -1000, -10, -1000, -10, -1000, -1000, 1199, 207, 102,
	1199, 1199, 300, 76, 176, -1000, 1223, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1223, 1223, -40, 42,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1223,
	1223, -43, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 125,
	122, 176, -1000, -1000, 888, 888, 15, 121, 1199, 118,
	117, -12, 101, -1000, 206, -1000, -1000, -1000, 1231, 176,
	-1000, -1000, 1231, -1000, -1000, 184, -1000, -1000, -1000, 249,
	-1000, 116, -1000, -1000, 1199, 198, -1000, -1000, -1000, -1000,
	105, 888, -1000, 828, 828, -14, 104, 888, -1000, -1000,
	-1000, 183, 249, -1000, -1000, -1000, 888, -1000, 98, 828,
	-1000, -1000, 828, -1000, 828,
}
var yyPgo = [...]int{

	0, 265, 264, 260, 83, 233, 201, 27, 228, 14,
	259, 0, 258, 252, 8, 1, 7, 10, 9, 6,
	11, 250, 249, 244, 243, 13, 12, 2, 241, 29,
	240, 248, 239, 324, 231, 5, 22,
}
var yyR1 = [...]int{

	0, 1, 1, 2, 2, 2, 2, 3, 3, 5,
	5, 5, 9, 9, 10, 10, 8, 8, 8, 8,
	7, 7, 7, 6, 6, 6, 6, 12, 12, 13,
	13, 14, 14, 14, 14, 14, 14, 14, 14, 14,
	15, 15, 15, 15, 15, 15, 18, 18, 18, 18,
	18, 18, 18, 16, 16, 19, 19, 19, 21, 21,
	22, 22, 22, 22, 23, 23, 23, 27, 27, 20,
	20, 25, 25, 17, 17, 11, 11, 28, 28, 28,
	28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
	28, 28, 28, 28, 28, 28, 28, 28, 28, 29,
	29, 29, 29, 29, 29, 29, 29, 29, 29, 29,
	29, 29, 29, 29, 29, 29, 29, 29, 29, 29,
	29, 29, 29, 29, 29, 29, 29, 29, 29, 29,
	29, 29, 29, 29, 29, 29, 29, 29, 29, 29,
	24, 24, 26, 26, 33, 33, 34, 34, 34, 34,
	34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
	34, 35, 35, 35, 35, 35, 35, 35, 35, 35,
	35, 35, 35, 35, 35, 35, 35, 35, 35, 35,
	35, 35, 35, 35, 35, 35, 35, 35, 35, 35,
	35, 35, 35, 35, 35, 31, 31, 31, 32, 32,
	32, 30, 36, 36, 4, 4,
}
var yyR2 = [...]int{

	0, 1, 1, 1, 3, 3, 3, 3, 3, 2,
	7, 7, 0, 1, 1, 3, 1, 1, 1, 4,
	3, 4, 4, 2, 2, 1, 1, 1, 2, 1,
	2, 2, 6, 9, 6, 10, 8, 2, 3, 3,
	1, 6, 9, 6, 10, 8, 1, 1, 1, 1,
	2, 2, 7, 0, 1, 5, 1, 1, 1, 2,
	2, 4, 2, 4, 2, 2, 2, 0, 1, 1,
	1, 4, 4, 0, 1, 1, 1, 2, 2, 3,
	3, 3, 3, 3, 3, 2, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 4, 4, 5, 1, 3,
	2, 3, 3, 3, 3, 3, 3, 2, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 5, 4, 4,
	5, 1, 1, 1, 1, 2, 2, 2, 2, 3,
	3, 3, 3, 3, 3, 3, 4, 4, 1, 1,
	0, 1, 1, 4, 1, 1, 2, 2, 3, 3,
	3, 3, 3, 3, 2, 3, 3, 3, 4, 4,
	5, 3, 2, 3, 3, 3, 3, 3, 3, 2,
	3, 3, 3, 5, 4, 4, 5, 1, 1, 1,
	1, 2, 2, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 4, 4, 1, 1, 4, 2, 1, 3,
	3, 3, 1, 2, 0, 2,
}
var yyChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -7, -8, 18, 44,
	9, 10, -11, -28, -29, 62, 63, -30, 46, 53,
	5, 6, -31, 7, 41, 42, 8, 26, -32, 4,
	60, -36, 27, -5, -8, 52, -6, 51, 52, -6,
	-6, -7, 4, 8, -4, 50, 67, 64, 66, 65,
	62, 63, -29, 55, 38, 40, 37, 54, 39, 59,
	36, 20, 35, 34, 57, 56, 67, 64, 66, 65,
	62, 63, -29, 55, 38, 40, 37, 54, 39, 59,
	36, 20, 35, 34, 57, 56, -11, -11, -11, -25,
	-11, 41, 42, 33, 32, 30, 31, 28, 29, 61,
	-31, -31, 46, 46, 48, -11, 55, -31, -6, -6,
	51, 52, 46, 46, 45, -12, -13, -14, -15, -7,
	19, 25, 17, 51, -18, -19, 11, 12, 21, 16,
	24, 14, 13, -11, -21, -22, 22, 23, -4, -11,
	-11, -11, -11, -11, -11, -11, -11, -11, -11, -11,
	-11, -11, -11, 4, -4, -4, -11, -36, -11, -11,
	-11, -11, -11, -11, -11, -11, -11, -11, -11, -11,
	-11, -11, 4, -4, -4, -11, -36, 50, 47, 50,
	47, -11, -11, -11, -11, -11, -11, -11, -27, -20,
	-11, -25, -27, -20, -11, -9, -10, 4, -9, 45,
	-14, -15, 45, -4, 46, 46, 46, -4, 52, 51,
	-17, -11, -17, -4, 4, -23, 54, 43, 56, -24,
	46, -26, -33, -34, -35, 62, 63, 53, 5, 6,
	-31, 7, 41, 42, 8, 26, -26, 46, -11, -11,
	-11, 58, -11, -11, 58, -4, -4, 20, 47, 47,
	49, 47, 50, 47, -11, -11, -16, 4, -19, -4,
	-4, -14, 19, 25, 17, -18, 48, -11, -11, -11,
	-25, -11, 50, 67, 64, 66, 65, 62, 63, -35,
	59, 36, 20, 35, 34, 57, 46, 67, 64, 66,
	65, 62, 63, -35, 59, 36, 20, 35, 34, 57,
	-33, -33, -33, 41, 42, 33, 32, 30, 31, 28,
	29, 61, -31, -31, 46, 46, -25, -11, -11, -11,
	-11, 4, -4, 4, -4, 47, 47, 51, 20, 25,
	46, 46, 46, -20, 47, 47, -4, -33, -33, -33,
	-33, -33, -33, -33, -33, 4, -4, -4, -33, -25,
	-33, -33, -33, -33, -33, -33, -33, -33, 4, -4,
	-4, -33, -33, -33, -33, -33, -33, -33, -33, -27,
	-27, 47, -7, -7, -4, -4, -17, 4, 46, -11,
	-11, -16, 4, 49, 20, -33, -33, -33, 58, 47,
	-33, -33, 58, 47, 47, -14, -15, -14, -15, 51,
	47, -11, 47, 47, 51, 20, 4, -33, -33, 15,
	-16, -4, 47, -4, -4, -17, 4, -4, 47, -14,
	-15, -14, 51, 47, -14, -15, -4, 15, -16, -4,
	-14, -15, -4, 47, -4,
}
var yyDef = [...]int{

	204, -2, 1, 2, 3, 0, 0, 0, 0, 204,
	16, 17, 18, 75, 76, 0, 0, 98, 0, 0,
	121, 122, 123, 124, 0, 0, 0, 138, 139, 195,
	0, 198, 202, 0, 0, 205, 5, 25, 26, 6,
	7, 9, 0, 0, 0, 204, 0, 0, 0, 0,
	0, 0, 85, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 204, 204, 0, 0, 0, 0, 0, 0,
	0, 0, 107, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 204, 204, 0, 0, 77, 78, 0, 0,
	100, 125, 126, 0, 0, 0, 0, 0, 0, 0,
	127, 128, 67, 67, 0, 197, 0, 203, 4, 8,
	23, 24, 12, 12, 20, 0, 0, 27, 29, 204,
	0, 0, 0, 204, 40, 46, 47, 48, 49, 73,
	73, 204, 0, 56, 57, 58, 140, 0, 0, 79,
	80, 81, 82, 83, 84, 86, 87, 88, 89, 90,
	91, 92, 93, 94, 0, 0, 0, 201, 101, 102,
	103, 104, 105, 106, 108, 109, 110, 111, 112, 113,
	114, 115, 116, 0, 0, 0, 200, 204, 99, 204,
	0, 129, 130, 131, 132, 133, 134, 135, 0, 68,
	69, 70, 0, 0, 199, 0, 13, 14, 0, 21,
	28, 30, 22, 31, 0, 0, 53, 37, 204, 204,
	50, 74, 51, 0, 0, 59, 0, 0, 0, 60,
	0, 141, 142, 144, 145, 0, 0, 0, 177, 178,
	179, 180, 0, 0, 0, 194, 62, 0, 19, 95,
	96, 0, 118, 119, 0, 0, 0, 0, 136, 137,
	196, 204, 0, 204, 0, 0, 0, 195, 54, 38,
	39, 0, 0, 0, 0, 0, 0, 64, 65, 66,
	0, 0, 204, 0, 0, 0, 0, 0, 0, 154,
	0, 0, 0, 204, 204, 0, 0, 0, 0, 0,
	0, 0, 0, 169, 0, 0, 0, 204, 204, 0,
	146, 147, 162, 181, 182, 0, 0, 0, 0, 0,
	0, 0, 183, 184, 67, 67, 0, 97, 120, 71,
	72, 117, 0, 15, 0, 204, 204, 73, 0, 0,
	0, 0, 53, 0, 61, 161, 0, 148, 149, 150,
	151, 152, 153, 155, 156, 157, 0, 0, 0, 0,
	163, 164, 165, 166, 167, 168, 170, 171, 172, 0,
	0, 0, 185, 186, 187, 188, 189, 190, 191, 0,
	0, 63, 10, 11, 0, 0, 0, 0, 0, 0,
	0, 0, 195, 55, 0, 143, 158, 159, 0, 0,
	174, 175, 0, 192, 193, 32, 41, 34, 43, 53,
	204, 0, 204, 204, 73, 0, 173, 160, 176, 204,
	0, 0, 52, 0, 0, 0, 0, 0, 204, 36,
	45, 32, 53, 204, 33, 42, 0, 204, 0, 0,
	35, 44, 0, 204, 0,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 53, 3, 3, 60, 65, 3, 3,
	46, 47, 64, 62, 50, 63, 3, 66, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 58, 51,
	55, 61, 54, 57, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 48, 3, 49, 67, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 44, 56, 45, 59,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 52,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	}
	goto yystack /* stack new state and value */
}
